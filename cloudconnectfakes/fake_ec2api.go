// Code generated by counterfeiter. DO NOT EDIT.
package cloudconnectfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/telia-oss/cloudconnect"
)

type FakeEC2API struct {
	AcceptTransitGatewayVpcAttachmentStub        func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	acceptTransitGatewayVpcAttachmentMutex       sync.RWMutex
	acceptTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}
	acceptTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	acceptTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	CreateTagsStub        func(*ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)
	createTagsMutex       sync.RWMutex
	createTagsArgsForCall []struct {
		arg1 *ec2.CreateTagsInput
	}
	createTagsReturns struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	createTagsReturnsOnCall map[int]struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	DeleteTransitGatewayVpcAttachmentStub        func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	deleteTransitGatewayVpcAttachmentMutex       sync.RWMutex
	deleteTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}
	deleteTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	deleteTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	DescribeTransitGatewayAttachmentsStub        func(*ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	describeTransitGatewayAttachmentsMutex       sync.RWMutex
	describeTransitGatewayAttachmentsArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}
	describeTransitGatewayAttachmentsReturns struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	describeTransitGatewayAttachmentsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	RejectTransitGatewayVpcAttachmentStub        func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	rejectTransitGatewayVpcAttachmentMutex       sync.RWMutex
	rejectTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}
	rejectTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	rejectTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	SearchTransitGatewayRoutesStub        func(*ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)
	searchTransitGatewayRoutesMutex       sync.RWMutex
	searchTransitGatewayRoutesArgsForCall []struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}
	searchTransitGatewayRoutesReturns struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	searchTransitGatewayRoutesReturnsOnCall map[int]struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachment(arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.acceptTransitGatewayVpcAttachmentReturnsOnCall[len(fake.acceptTransitGatewayVpcAttachmentArgsForCall)]
	fake.acceptTransitGatewayVpcAttachmentArgsForCall = append(fake.acceptTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("AcceptTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.AcceptTransitGatewayVpcAttachmentStub != nil {
		return fake.AcceptTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentCallCount() int {
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.acceptTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentCalls(stub func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.AcceptTransitGatewayVpcAttachmentInput {
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.acceptTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentReturns(result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = nil
	fake.acceptTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = nil
	if fake.acceptTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.acceptTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.acceptTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTags(arg1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	fake.createTagsMutex.Lock()
	ret, specificReturn := fake.createTagsReturnsOnCall[len(fake.createTagsArgsForCall)]
	fake.createTagsArgsForCall = append(fake.createTagsArgsForCall, struct {
		arg1 *ec2.CreateTagsInput
	}{arg1})
	fake.recordInvocation("CreateTags", []interface{}{arg1})
	fake.createTagsMutex.Unlock()
	if fake.CreateTagsStub != nil {
		return fake.CreateTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTagsCallCount() int {
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	return len(fake.createTagsArgsForCall)
}

func (fake *FakeEC2API) CreateTagsCalls(stub func(*ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = stub
}

func (fake *FakeEC2API) CreateTagsArgsForCall(i int) *ec2.CreateTagsInput {
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	argsForCall := fake.createTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTagsReturns(result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = nil
	fake.createTagsReturns = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsReturnsOnCall(i int, result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = nil
	if fake.createTagsReturnsOnCall == nil {
		fake.createTagsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTagsOutput
			result2 error
		})
	}
	fake.createTagsReturnsOnCall[i] = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachment(arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayVpcAttachmentReturnsOnCall[len(fake.deleteTransitGatewayVpcAttachmentArgsForCall)]
	fake.deleteTransitGatewayVpcAttachmentArgsForCall = append(fake.deleteTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.DeleteTransitGatewayVpcAttachmentStub != nil {
		return fake.DeleteTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentCallCount() int {
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.deleteTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentCalls(stub func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.DeleteTransitGatewayVpcAttachmentInput {
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentReturns(result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = nil
	fake.deleteTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = nil
	if fake.deleteTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.deleteTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachments(arg1 *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayAttachmentsReturnsOnCall[len(fake.describeTransitGatewayAttachmentsArgsForCall)]
	fake.describeTransitGatewayAttachmentsArgsForCall = append(fake.describeTransitGatewayAttachmentsArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayAttachments", []interface{}{arg1})
	fake.describeTransitGatewayAttachmentsMutex.Unlock()
	if fake.DescribeTransitGatewayAttachmentsStub != nil {
		return fake.DescribeTransitGatewayAttachmentsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayAttachmentsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsCallCount() int {
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	return len(fake.describeTransitGatewayAttachmentsArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsCalls(stub func(*ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsArgsForCall(i int) *ec2.DescribeTransitGatewayAttachmentsInput {
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayAttachmentsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsReturns(result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = nil
	fake.describeTransitGatewayAttachmentsReturns = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = nil
	if fake.describeTransitGatewayAttachmentsReturnsOnCall == nil {
		fake.describeTransitGatewayAttachmentsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayAttachmentsOutput
			result2 error
		})
	}
	fake.describeTransitGatewayAttachmentsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachment(arg1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.rejectTransitGatewayVpcAttachmentReturnsOnCall[len(fake.rejectTransitGatewayVpcAttachmentArgsForCall)]
	fake.rejectTransitGatewayVpcAttachmentArgsForCall = append(fake.rejectTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("RejectTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.RejectTransitGatewayVpcAttachmentStub != nil {
		return fake.RejectTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentCallCount() int {
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.rejectTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentCalls(stub func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.RejectTransitGatewayVpcAttachmentInput {
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.rejectTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentReturns(result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = nil
	fake.rejectTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = nil
	if fake.rejectTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.rejectTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.rejectTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutes(arg1 *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	ret, specificReturn := fake.searchTransitGatewayRoutesReturnsOnCall[len(fake.searchTransitGatewayRoutesArgsForCall)]
	fake.searchTransitGatewayRoutesArgsForCall = append(fake.searchTransitGatewayRoutesArgsForCall, struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}{arg1})
	fake.recordInvocation("SearchTransitGatewayRoutes", []interface{}{arg1})
	fake.searchTransitGatewayRoutesMutex.Unlock()
	if fake.SearchTransitGatewayRoutesStub != nil {
		return fake.SearchTransitGatewayRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchTransitGatewayRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesCallCount() int {
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	return len(fake.searchTransitGatewayRoutesArgsForCall)
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesCalls(stub func(*ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = stub
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesArgsForCall(i int) *ec2.SearchTransitGatewayRoutesInput {
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	argsForCall := fake.searchTransitGatewayRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesReturns(result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = nil
	fake.searchTransitGatewayRoutesReturns = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesReturnsOnCall(i int, result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = nil
	if fake.searchTransitGatewayRoutesReturnsOnCall == nil {
		fake.searchTransitGatewayRoutesReturnsOnCall = make(map[int]struct {
			result1 *ec2.SearchTransitGatewayRoutesOutput
			result2 error
		})
	}
	fake.searchTransitGatewayRoutesReturnsOnCall[i] = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEC2API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudconnect.EC2API = new(FakeEC2API)
